<?php
/**
 * MediaSourceConfig
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Cloudinary
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Media Delivery
 *
 * Media Delivery API
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cloudinary\Model;

use \ArrayAccess;
use \Cloudinary\ObjectSerializer;

/**
 * MediaSourceConfig Class Doc Comment
 *
 * @category Class
 * @package  Cloudinary
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MediaSourceConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MediaSourceConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        's3_bucket_name' => 'string',
        's3_bucket_folder' => 'string',
        's3_access_key' => 'string',
        's3_secret_key' => 'string',
        's3_uri_template' => 'string',
        'gs_bucket_name' => 'string',
        'gs_bucket_folder' => 'string',
        'gs_service_account_key' => 'string',
        'gs_uri_template' => 'string',
        'web_uri_base' => 'string',
        'web_headers' => 'array<string,string>',
        'web_uri_template' => 'string',
        'cld_cloud_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        's3_bucket_name' => null,
        's3_bucket_folder' => null,
        's3_access_key' => null,
        's3_secret_key' => null,
        's3_uri_template' => null,
        'gs_bucket_name' => null,
        'gs_bucket_folder' => null,
        'gs_service_account_key' => null,
        'gs_uri_template' => null,
        'web_uri_base' => null,
        'web_headers' => null,
        'web_uri_template' => null,
        'cld_cloud_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's3_bucket_name' => 's3_bucket_name',
        's3_bucket_folder' => 's3_bucket_folder',
        's3_access_key' => 's3_access_key',
        's3_secret_key' => 's3_secret_key',
        's3_uri_template' => 's3_uri_template',
        'gs_bucket_name' => 'gs_bucket_name',
        'gs_bucket_folder' => 'gs_bucket_folder',
        'gs_service_account_key' => 'gs_service_account_key',
        'gs_uri_template' => 'gs_uri_template',
        'web_uri_base' => 'web_uri_base',
        'web_headers' => 'web_headers',
        'web_uri_template' => 'web_uri_template',
        'cld_cloud_name' => 'cld_cloud_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        's3_bucket_name' => 'setS3BucketName',
        's3_bucket_folder' => 'setS3BucketFolder',
        's3_access_key' => 'setS3AccessKey',
        's3_secret_key' => 'setS3SecretKey',
        's3_uri_template' => 'setS3UriTemplate',
        'gs_bucket_name' => 'setGsBucketName',
        'gs_bucket_folder' => 'setGsBucketFolder',
        'gs_service_account_key' => 'setGsServiceAccountKey',
        'gs_uri_template' => 'setGsUriTemplate',
        'web_uri_base' => 'setWebUriBase',
        'web_headers' => 'setWebHeaders',
        'web_uri_template' => 'setWebUriTemplate',
        'cld_cloud_name' => 'setCldCloudName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        's3_bucket_name' => 'getS3BucketName',
        's3_bucket_folder' => 'getS3BucketFolder',
        's3_access_key' => 'getS3AccessKey',
        's3_secret_key' => 'getS3SecretKey',
        's3_uri_template' => 'getS3UriTemplate',
        'gs_bucket_name' => 'getGsBucketName',
        'gs_bucket_folder' => 'getGsBucketFolder',
        'gs_service_account_key' => 'getGsServiceAccountKey',
        'gs_uri_template' => 'getGsUriTemplate',
        'web_uri_base' => 'getWebUriBase',
        'web_headers' => 'getWebHeaders',
        'web_uri_template' => 'getWebUriTemplate',
        'cld_cloud_name' => 'getCldCloudName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['s3_bucket_name'] = $data['s3_bucket_name'] ?? null;
        $this->container['s3_bucket_folder'] = $data['s3_bucket_folder'] ?? null;
        $this->container['s3_access_key'] = $data['s3_access_key'] ?? null;
        $this->container['s3_secret_key'] = $data['s3_secret_key'] ?? null;
        $this->container['s3_uri_template'] = $data['s3_uri_template'] ?? null;
        $this->container['gs_bucket_name'] = $data['gs_bucket_name'] ?? null;
        $this->container['gs_bucket_folder'] = $data['gs_bucket_folder'] ?? null;
        $this->container['gs_service_account_key'] = $data['gs_service_account_key'] ?? null;
        $this->container['gs_uri_template'] = $data['gs_uri_template'] ?? null;
        $this->container['web_uri_base'] = $data['web_uri_base'] ?? null;
        $this->container['web_headers'] = $data['web_headers'] ?? null;
        $this->container['web_uri_template'] = $data['web_uri_template'] ?? null;
        $this->container['cld_cloud_name'] = $data['cld_cloud_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets s3_bucket_name
     *
     * @return string|null
     */
    public function getS3BucketName()
    {
        return $this->container['s3_bucket_name'];
    }

    /**
     * Sets s3_bucket_name
     *
     * @param string|null $s3_bucket_name The name of the S3 bucket.
     *
     * @return self
     */
    public function setS3BucketName($s3_bucket_name)
    {
        $this->container['s3_bucket_name'] = $s3_bucket_name;

        return $this;
    }

    /**
     * Gets s3_bucket_folder
     *
     * @return string|null
     */
    public function getS3BucketFolder()
    {
        return $this->container['s3_bucket_folder'];
    }

    /**
     * Sets s3_bucket_folder
     *
     * @param string|null $s3_bucket_folder The bucket containing your media files.
     *
     * @return self
     */
    public function setS3BucketFolder($s3_bucket_folder)
    {
        $this->container['s3_bucket_folder'] = $s3_bucket_folder;

        return $this;
    }

    /**
     * Gets s3_access_key
     *
     * @return string|null
     */
    public function getS3AccessKey()
    {
        return $this->container['s3_access_key'];
    }

    /**
     * Sets s3_access_key
     *
     * @param string|null $s3_access_key The access key ID required to read from your S3 bucket.
     *
     * @return self
     */
    public function setS3AccessKey($s3_access_key)
    {
        $this->container['s3_access_key'] = $s3_access_key;

        return $this;
    }

    /**
     * Gets s3_secret_key
     *
     * @return string|null
     */
    public function getS3SecretKey()
    {
        return $this->container['s3_secret_key'];
    }

    /**
     * Sets s3_secret_key
     *
     * @param string|null $s3_secret_key The secret access key required to read from your S3 bucket.
     *
     * @return self
     */
    public function setS3SecretKey($s3_secret_key)
    {
        $this->container['s3_secret_key'] = $s3_secret_key;

        return $this;
    }

    /**
     * Gets s3_uri_template
     *
     * @return string|null
     */
    public function getS3UriTemplate()
    {
        return $this->container['s3_uri_template'];
    }

    /**
     * Sets s3_uri_template
     *
     * @param string|null $s3_uri_template Advanced option for specifying parameters to include in the fetch request. You can use interpolated variables that are defined in the mapping function code.
     *
     * @return self
     */
    public function setS3UriTemplate($s3_uri_template)
    {
        $this->container['s3_uri_template'] = $s3_uri_template;

        return $this;
    }

    /**
     * Gets gs_bucket_name
     *
     * @return string|null
     */
    public function getGsBucketName()
    {
        return $this->container['gs_bucket_name'];
    }

    /**
     * Sets gs_bucket_name
     *
     * @param string|null $gs_bucket_name The name of the Google Storage bucket.
     *
     * @return self
     */
    public function setGsBucketName($gs_bucket_name)
    {
        $this->container['gs_bucket_name'] = $gs_bucket_name;

        return $this;
    }

    /**
     * Gets gs_bucket_folder
     *
     * @return string|null
     */
    public function getGsBucketFolder()
    {
        return $this->container['gs_bucket_folder'];
    }

    /**
     * Sets gs_bucket_folder
     *
     * @param string|null $gs_bucket_folder The bucket containing your media files.
     *
     * @return self
     */
    public function setGsBucketFolder($gs_bucket_folder)
    {
        $this->container['gs_bucket_folder'] = $gs_bucket_folder;

        return $this;
    }

    /**
     * Gets gs_service_account_key
     *
     * @return string|null
     */
    public function getGsServiceAccountKey()
    {
        return $this->container['gs_service_account_key'];
    }

    /**
     * Sets gs_service_account_key
     *
     * @param string|null $gs_service_account_key The JSON configuration converted to a string. Can be downloaded from the keys page for your service account.
     *
     * @return self
     */
    public function setGsServiceAccountKey($gs_service_account_key)
    {
        $this->container['gs_service_account_key'] = $gs_service_account_key;

        return $this;
    }

    /**
     * Gets gs_uri_template
     *
     * @return string|null
     */
    public function getGsUriTemplate()
    {
        return $this->container['gs_uri_template'];
    }

    /**
     * Sets gs_uri_template
     *
     * @param string|null $gs_uri_template Advanced option for specifying parameters to include in the fetch request. You can use interpolated variables that are defined in the mapping function code.
     *
     * @return self
     */
    public function setGsUriTemplate($gs_uri_template)
    {
        $this->container['gs_uri_template'] = $gs_uri_template;

        return $this;
    }

    /**
     * Gets web_uri_base
     *
     * @return string|null
     */
    public function getWebUriBase()
    {
        return $this->container['web_uri_base'];
    }

    /**
     * Sets web_uri_base
     *
     * @param string|null $web_uri_base The full URL of the web server (including http:// or https://).
     *
     * @return self
     */
    public function setWebUriBase($web_uri_base)
    {
        $this->container['web_uri_base'] = $web_uri_base;

        return $this;
    }

    /**
     * Gets web_headers
     *
     * @return array<string,string>|null
     */
    public function getWebHeaders()
    {
        return $this->container['web_headers'];
    }

    /**
     * Sets web_headers
     *
     * @param array<string,string>|null $web_headers Advanced option for specifying headers in key/value pairs to include in the fetch request, for authentication or authorization purposes.
     *
     * @return self
     */
    public function setWebHeaders($web_headers)
    {
        $this->container['web_headers'] = $web_headers;

        return $this;
    }

    /**
     * Gets web_uri_template
     *
     * @return string|null
     */
    public function getWebUriTemplate()
    {
        return $this->container['web_uri_template'];
    }

    /**
     * Sets web_uri_template
     *
     * @param string|null $web_uri_template Advanced option for specifying parameters to include in the fetch request. You can use interpolated variables that are defined in the mapping function code.
     *
     * @return self
     */
    public function setWebUriTemplate($web_uri_template)
    {
        $this->container['web_uri_template'] = $web_uri_template;

        return $this;
    }

    /**
     * Gets cld_cloud_name
     *
     * @return string|null
     */
    public function getCldCloudName()
    {
        return $this->container['cld_cloud_name'];
    }

    /**
     * Sets cld_cloud_name
     *
     * @param string|null $cld_cloud_name The cloud name of the Cloudinary account where your media is stored. It must share the same overall Cloudinary account as the Media Editing API sub-account.
     *
     * @return self
     */
    public function setCldCloudName($cld_cloud_name)
    {
        $this->container['cld_cloud_name'] = $cld_cloud_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


